from ringtail import RingtailCore
from sys import exit
import os

"""
This Python script will analize the docking results generated by AutoDock-GPU, processing the whole folder of -pdbqt docked files
"""

main_docking_path = "DEFINE HERE THE DOCKING PATH"


def create_run_variables(system):
    working_dir = f'{main_docking_path}/{system[0]}/{system[1]}'

    return working_dir


def create_database_folder(working_dir):

    database_dir = f'{working_dir}/results_database'

    if not os.path.isdir(database_dir):
        os.makedirs(database_dir)

    else:
        print("The DataBase Dir folder already exists... EXITING.")
        exit()

    return database_dir


def create_database_from_dlgs(working_dir,database_dir):
    opts = RingtailCore.get_defaults()

    opts["rman_opts"]["values"]["file_sources"]["file_path"]["path"] = [[working_dir]]
    opts["rman_opts"]["values"]["file_sources"]["file_path"]["recursive"] = True
    opts["rman_opts"]["values"]["max_poses"] = 100
    opts["storage_opts"]["values"]["db_file"] = f'{database_dir}/output.db'
    opts["out_opts"]["values"]["export_sdf_path"] = f'{database_dir}'

    with RingtailCore(**opts) as rt_core:
        rt_core.add_results()


    return opts

# Do not change these variables
main_docking_path = f'{main_docking_path}/4-Docking_results'

# Folders to analyze
# Notation: [0]: The ligands file to prepare, [1]: receptor folder
system = ['aldehydes','complejo-simulado-V2-monomero-ionizado/grilla-nativa']

# Run these functions to execute the workflow
working_dir = create_run_variables(system)
database_dir = create_database_folder(working_dir)
opts = create_database_from_dlgs(working_dir,database_dir)

#print(opts["rman_opts"]["values"].keys())
